---
name: build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - release/**
      - releng-329

env:
  PKG_NAME: consul

jobs:
  product-metadata:
    runs-on: ubuntu-latest
    outputs:
      build-date: ${{ steps.get-metadata.outputs.build-date }}
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
      go-version: ${{ steps.get-metadata.outputs.go-version }}
      package-name: ${{ steps.get-metadata.outputs.package-name }}
      consul-revision: ${{ steps.get-metadata.outputs.consul-revision }}
      consul-version: ${{ steps.get-metadata.outputs.consul-version }}
      consul-base-version: ${{ steps.get-metadata.outputs.consul-base-version }}
    steps:
      - uses: actions/checkout@v3
      - name: Get metadata
        id: get-metadata
        run: |
          echo "build-date=$(make crt-get-date)" >> $GITHUB_OUTPUT
          echo "go-version=$(cat ./.go-version)" >> $GITHUB_OUTPUT
          echo "matrix-test-group=$(make crt-get-matrix-group-id)" >> $GITHUB_OUTPUT
          echo "package-name=${{ env.PKG_NAME }}" >> $GITHUB_OUTPUT
          echo "consul-base-version=$(make crt-get-version-base)" >> $GITHUB_OUTPUT
          echo "consul-revision=$(make crt-get-revision)" >> $GITHUB_OUTPUT
          echo "consul-version=$(make crt-get-version)" >> $GITHUB_OUTPUT
      - uses: hashicorp/actions-generate-metadata@v1
        id: generate-metadata-file
        with:
          version: ${{ steps.get-metadata.outputs.consul-version }}
          product: ${{ steps.get-metadata.outputs.package-name }}
      - uses: actions/upload-artifact@v3
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}
          if-no-files-found: error
  build-other:
    name: Build Consul Other
    needs: product-metadata
    strategy:
      matrix:
        include:
          - {goos: "freebsd", goarch: "386"}
          - {goos: "freebsd", goarch: "amd64"}
          - {goos: "windows", goarch: "386"}
          - {goos: "windows", goarch: "amd64"}
          - {goos: "solaris", goarch: "amd64"}
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit

  build-linux:
    name: Build Consul Linux
    needs: product-metadata
    strategy:
      matrix:
        goos: [linux]
        goarch: [arm, arm64, 386, amd64]
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit

  build-darwin:
    name: Build Consul Darwin
    needs: product-metadata
    strategy:
      matrix:
        goos: [darwin]
        goarch: [amd64, arm64]
      fail-fast: true
    uses: ./.github/workflows/build-consul-oss.yml
    with:
      create-packages: false
      goarch: ${{ matrix.goarch }}
      goos: ${{ matrix.goos }}
      go-tags: ui netcgo
      go-version: ${{ needs.product-metadata.outputs.go-version }}
      package-name: ${{ needs.product-metadata.outputs.package-name }}
      consul-version: ${{ needs.product-metadata.outputs.consul-version }}
    secrets: inherit
  
  build-docker:
    name: Build Consul Docker
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [arm, arm64, 386, amd64]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.product-metadata.outputs.consul-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{ env.version }}
          target: default
          arch: ${{ matrix.arch }}
          zip_artifact_name: ${{ env.PKG_NAME }}_${{ needs.product-metadata.outputs.consul-version }}_linux_${{ matrix.arch }}.zip
          tags: |
            docker.io/hashicorp/${{ env.repo }}:${{ env.version }}
            public.ecr.aws/hashicorp/${{ env.repo }}:${{ env.version }}

  build-ubi:
    name: Build Consul Red Hat UBI
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64]
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.product-metadata.outputs.consul-version }}
    steps:
      - uses: actions/checkout@v2
      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{ env.version }}
          target: ubi
          arch: ${{ matrix.arch }}
          zip_artifact_name: ${{ env.PKG_NAME }}_${{ needs.product-metadata.outputs.consul-version }}_linux_${{ matrix.arch }}.zip
          # TODO: change opsid tag
          redhat_tag: quay.io/redhat-isv-containers/5f89bb5e0b94cf64cfeb500a:${{ env.version }}-ubi

  build-docker-ubi-dockerhub:
    name: Docker Build UBI Image for DockerHub
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    env:
      repo: ${{github.event.repository.name}}
      version: ${{ needs.product-metadata.outputs.consul-version }}

    steps:
      - uses: actions/checkout@v2

      # Strip everything but MAJOR.MINOR from the version string and add a `-dev` suffix
      # This naming convention will be used ONLY for per-commit dev images
      - name: Set docker dev tag
        run: |
          version="${{ env.version }}"
          echo "dev_tag=${version%.*}-dev" >> $GITHUB_ENV

      - uses: hashicorp/actions-docker-build@v1
        with:
          version: ${{env.version}}
          target: ubi
          arch: amd64
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}-ubi
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}-ubi
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.dev_tag }}-ubi-${{ github.sha }}
          smoke_test: .github/scripts/verify_docker.sh v${{ env.version }}

  verify-linux:
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["386", "amd64", "arm", "arm64"]
      fail-fast: true
    env:
      version: ${{ needs.product-metadata.outputs.consul-version }}
      zip_name: consul_${{ needs.product-metadata.outputs.consul-version }}_linux_${{ matrix.arch }}.zip

    name: Verify ${{ matrix.arch }} linux binary
    steps:
      - uses: actions/checkout@v2

      - name: Download ${{ matrix.arch  }} zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.zip_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        if: ${{ matrix.arch == 'arm' || matrix.arch == 'arm64' }}
        with:
          # this should be a comma-separated string as opposed to an array
          platforms: arm,arm64

      - name: Run verification for ${{ matrix.arch }} binary
        run: .github/scripts/verify_artifact.sh ${{ env.zip_name }} v${{ env.version }}

  verify-darwin:
    needs:
      - product-metadata
      - build-darwin
    runs-on: macos-latest
    strategy:
      fail-fast: true
    env:
      version: ${{ needs.product-metadata.outputs.consul-version }}
      zip_name: consul_${{ needs.product-metadata.outputs.consul-version }}_darwin_amd64.zip

    name: Verify amd64 darwin binary
    steps:
      - uses: actions/checkout@v2

      - name: Download amd64 darwin zip
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.zip_name }}

      - name: Unzip amd64 darwin zip
        run: unzip ${{ env.zip_name }}

      - name: Run verification for amd64 darwin binary
        run: .github/scripts/verify_bin.sh ./consul v${{ env.version }}

  verify-linux-packages-deb:
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["i386", "amd64", "armhf", "arm64"]
      # fail-fast: true
    env:
      version: ${{ needs.product-metadata.outputs.consul-version }}

    name: Verify ${{ matrix.arch }} debian package
    steps:
      - uses: actions/checkout@v2

      - name: Set package version
        run: |
          echo "pkg_version=$(echo ${{ needs.product-metadata.outputs.consul-version }} | sed 's/\-/~/g')" >> $GITHUB_ENV

      - name: Set package name
        run: |
          echo "pkg_name=consul_${{ env.pkg_version }}-1_${{ matrix.arch }}.deb" >> $GITHUB_ENV

      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.pkg_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Verify ${{ matrix.arch }} debian package
        run: ./.github/scripts/verify_artifact.sh ${{ env.pkg_name }} v${{ env.version }}

  verify-linux-packages-rpm:
    needs:
      - product-metadata
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO(eculver): re-enable when there is a smaller verification container available
        arch: ["i386", "x86_64"] #, "armv7hl", "aarch64"]
    env:
      version: ${{ needs.product-metadata.outputs.consul-version }}

    name: Verify ${{ matrix.arch }} rpm
    steps:
      - uses: actions/checkout@v2

      - name: Set package version
        run: |
          echo "pkg_version=$(echo ${{ needs.product-metadata.outputs.consul-version }} | sed 's/\-/~/g')" >> $GITHUB_ENV

      - name: Set package name
        run: |
          echo "pkg_name=consul-${{ env.pkg_version }}-1.${{ matrix.arch }}.rpm" >> $GITHUB_ENV

      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.pkg_name }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Verify ${{ matrix.arch }} rpm
        run: ./.github/scripts/verify_artifact.sh ${{ env.pkg_name }} v${{ env.version }}
